// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/DbSync.proto

package dbSync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DbSync_Create_FullMethodName = "/DbSync.DbSync/Create"
	DbSync_Update_FullMethodName = "/DbSync.DbSync/Update"
	DbSync_Delete_FullMethodName = "/DbSync.DbSync/Delete"
	DbSync_Get_FullMethodName    = "/DbSync.DbSync/Get"
)

// DbSyncClient is the client API for DbSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbSyncClient interface {
	Create(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Null, error)
	Update(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Null, error)
	Delete(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*Null, error)
	Get(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*Post, error)
}

type dbSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewDbSyncClient(cc grpc.ClientConnInterface) DbSyncClient {
	return &dbSyncClient{cc}
}

func (c *dbSyncClient) Create(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Null, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Null)
	err := c.cc.Invoke(ctx, DbSync_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbSyncClient) Update(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Null, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Null)
	err := c.cc.Invoke(ctx, DbSync_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbSyncClient) Delete(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*Null, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Null)
	err := c.cc.Invoke(ctx, DbSync_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbSyncClient) Get(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*Post, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Post)
	err := c.cc.Invoke(ctx, DbSync_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbSyncServer is the server API for DbSync service.
// All implementations must embed UnimplementedDbSyncServer
// for forward compatibility.
type DbSyncServer interface {
	Create(context.Context, *Post) (*Null, error)
	Update(context.Context, *Post) (*Null, error)
	Delete(context.Context, *PostId) (*Null, error)
	Get(context.Context, *PostId) (*Post, error)
	mustEmbedUnimplementedDbSyncServer()
}

// UnimplementedDbSyncServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDbSyncServer struct{}

func (UnimplementedDbSyncServer) Create(context.Context, *Post) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDbSyncServer) Update(context.Context, *Post) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDbSyncServer) Delete(context.Context, *PostId) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDbSyncServer) Get(context.Context, *PostId) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDbSyncServer) mustEmbedUnimplementedDbSyncServer() {}
func (UnimplementedDbSyncServer) testEmbeddedByValue()                {}

// UnsafeDbSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbSyncServer will
// result in compilation errors.
type UnsafeDbSyncServer interface {
	mustEmbedUnimplementedDbSyncServer()
}

func RegisterDbSyncServer(s grpc.ServiceRegistrar, srv DbSyncServer) {
	// If the following call pancis, it indicates UnimplementedDbSyncServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DbSync_ServiceDesc, srv)
}

func _DbSync_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbSyncServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbSync_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbSyncServer).Create(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbSync_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbSyncServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbSync_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbSyncServer).Update(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbSync_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbSyncServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbSync_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbSyncServer).Delete(ctx, req.(*PostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbSync_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbSyncServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbSync_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbSyncServer).Get(ctx, req.(*PostId))
	}
	return interceptor(ctx, in, info, handler)
}

// DbSync_ServiceDesc is the grpc.ServiceDesc for DbSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DbSync.DbSync",
	HandlerType: (*DbSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DbSync_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DbSync_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DbSync_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DbSync_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/DbSync.proto",
}
